# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Meduyu6B0I7oGq17QkI3nZ7JbaseLGv
"""

import pandas as pd

import matplotlib.pyplot as plt

import numpy as np

import sklearn


from sklearn.linear_model import LogisticRegression
from sklearn.datasets import load_iris

iris=load_iris()

print(iris)

iris.keys()

print(iris.target_names)

print(iris.feature_names)

df=pd.DataFrame(iris.data)

print(df.all)

df.columns=iris.feature_names

df

def visuvalize_sepal_data():
	X = iris.data[:, :2]  # we only take the first two features.
	y = iris.target
	plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Accent)
	plt.xlabel('Sepal length')
	plt.ylabel('Sepal width')
	plt.title('Sepal Width & Length')
	plt.show()

visuvalize_sepal_data()

def visuvalize_petal_data():

	X = iris.data[:, 2:]  # we only take the last two features.
	y = iris.target
	plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Accent)
	plt.xlabel('Petal length')
	plt.ylabel('Petal width')
	plt.title('Petal Width & Length')
	plt.show()

visuvalize_petal_data()

"""# **Answer of last question of homework :**
  According to the graphs, It seems that data can be categorized with data related to petals(Petal Width & Length).
"""

X=iris.data #Independent variable 

Y=iris.target # Dependent variable 

X_train,X_test,Y_train,Y_test=sklearn.model_selection.train_test_split(X,Y,test_size=0.5,random_state=2)

from sklearn.preprocessing import StandardScaler 

sc=StandardScaler()

X_train=sc.fit_transform(X_train)

X_test=sc.transform(X_test)

lorg=LogisticRegression(random_state=0 , multi_class='multinomial' )

lorg.fit(X_train,Y_train)

Y_pred=lorg.predict(X_test)

print(Y_pred)

from sklearn.metrics import confusion_matrix

cm=confusion_matrix(Y_test,Y_pred)

cm

from sklearn.metrics import accuracy_score

print(accuracy_score(Y_test,Y_pred))

from sklearn.metrics import recall_score

print(recall_score(Y_test,Y_pred , average='macro'))

from sklearn.metrics import precision_score

print(precision_score(Y_test,Y_pred, average='macro'))